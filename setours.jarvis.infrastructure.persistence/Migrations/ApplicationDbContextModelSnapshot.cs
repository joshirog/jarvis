// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using setours.jarvis.infrastructure.persistence;

namespace setours.jarvis.infrastructure.persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("setours.jarvis.domain.entity.Contacts.ContactDataEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("ContactId")
                        .HasColumnName("co_contact_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con la tabla co_contacts");

                    b.Property<int>("ContactMediaId")
                        .HasColumnName("co_media_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con la tabla co_medias");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 650, DateTimeKind.Local).AddTicks(7788));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("value")
                        .HasColumnType("text")
                        .HasComment("valor del datos ingresado");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("ContactMediaId");

                    b.ToTable("co_contact_data");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Contacts.ContactDetailEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("ContactId")
                        .HasColumnName("co_contact_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con co_contacts")
                        .HasMaxLength(150);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 647, DateTimeKind.Local).AddTicks(5811));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<int>("SegmentationMarketId")
                        .HasColumnName("name")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con ge_segmentations")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("SegmentationMarketId");

                    b.ToTable("co_contact_details");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Contacts.ContactEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CodeSetra")
                        .HasColumnName("code_setra")
                        .HasColumnType("character varying(20)")
                        .HasComment("Llave primaria del sistema version 1")
                        .HasMaxLength(20);

                    b.Property<int>("ContactTypeId")
                        .HasColumnName("co_type_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con la tabla co_types");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 644, DateTimeKind.Local).AddTicks(5290));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<bool>("IsNotifiable")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_notifiable")
                        .HasColumnType("boolean")
                        .HasComment("Habilidado enviar notificaciones o correos al contacto")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasComment("Nombre del contacto")
                        .HasMaxLength(150);

                    b.Property<string>("Prefix")
                        .HasColumnName("prefix")
                        .HasColumnType("character varying(10)")
                        .HasComment("Prefijo dl contacto Mr - Mrs.")
                        .HasMaxLength(10);

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("character(1)")
                        .IsFixedLength(true)
                        .HasComment("Estado A: Activo, I: Inactivo, X: Eliminado")
                        .HasMaxLength(1)
                        .HasDefaultValue("A");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("character varying(150)")
                        .HasComment("Cargo o titulo del contacto")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.ToTable("co_contacts");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Contacts.ContactMediaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 640, DateTimeKind.Local).AddTicks(7664));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasComment("Nombre de la moneda")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("co_medias");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Contacts.ContactTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 638, DateTimeKind.Local).AddTicks(4197));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasComment("Nombre de la moneda")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("co_types");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Generals.AccommodationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnName("abbreviation")
                        .HasColumnType("character varying(8)")
                        .HasComment("Abreviatura de la ocupacion")
                        .HasMaxLength(8);

                    b.Property<string>("CodeSetra")
                        .HasColumnName("code_setra")
                        .HasColumnType("character varying(20)")
                        .HasComment("Llave primaria del sistema version 1")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 566, DateTimeKind.Local).AddTicks(2617));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("character varying(150)")
                        .HasComment("Descripcion de la ocupacion del servicio o tarifa")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasComment("Nombre de la ocupacion")
                        .HasMaxLength(150);

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("character(1)")
                        .IsFixedLength(true)
                        .HasComment("Estado A: Activo, I: Inactivo, X: Eliminado")
                        .HasMaxLength(1)
                        .HasDefaultValue("A");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ge_accommodations");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Generals.AdditionalEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CodeSetra")
                        .HasColumnName("code_setra")
                        .HasColumnType("character varying(20)")
                        .HasComment("Llave primaria del sistema version 1")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 584, DateTimeKind.Local).AddTicks(4658));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("character varying(150)")
                        .HasComment("Descripcion detallada del concepto adicional")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasComment("Nombre del adicional")
                        .HasMaxLength(150);

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("character(1)")
                        .IsFixedLength(true)
                        .HasComment("Estado A: Activo, I: Inactivo, X: Eliminado")
                        .HasMaxLength(1)
                        .HasDefaultValue("A");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ge_additionals");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Generals.CategoryServiceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 598, DateTimeKind.Local).AddTicks(28));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasComment("Nombre de la categoria del hotel o servicio")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ge_category_services");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Generals.CategorySetoursEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 600, DateTimeKind.Local).AddTicks(3441));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasComment("Nombre de la categoria de setours")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ge_category_setours");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Generals.CurrencyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnName("abbreviation")
                        .HasColumnType("character varying(8)")
                        .HasComment("Nombre corto de la moneda")
                        .HasMaxLength(8);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(8)")
                        .HasComment("Codigo del la moneda")
                        .HasMaxLength(8);

                    b.Property<string>("CodeSetra")
                        .HasColumnName("code_setra")
                        .HasColumnType("character varying(20)")
                        .HasComment("Llave primaria del sistema version 1")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 560, DateTimeKind.Local).AddTicks(4129));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasComment("Nombre de la moneda")
                        .HasMaxLength(150);

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("character(1)")
                        .IsFixedLength(true)
                        .HasComment("Estado A: Activo, I: Inactivo, X: Eliminado")
                        .HasMaxLength(1)
                        .HasDefaultValue("A");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ge_currency");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Generals.DocumentTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnName("abbreviation")
                        .HasColumnType("character varying(8)")
                        .HasComment("Abreviatura del tipo de documento")
                        .HasMaxLength(8);

                    b.Property<string>("CodeSetra")
                        .HasColumnName("code_setra")
                        .HasColumnType("character varying(20)")
                        .HasComment("Llave primaria del sistema version 1")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 563, DateTimeKind.Local).AddTicks(2241));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasComment("Nombre del tipo de documento")
                        .HasMaxLength(150);

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("character(1)")
                        .IsFixedLength(true)
                        .HasComment("Estado A: Activo, I: Inactivo, X: Eliminado")
                        .HasMaxLength(1)
                        .HasDefaultValue("A");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ge_document_types");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Generals.InclusionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CodeSetra")
                        .HasColumnName("code_setra")
                        .HasColumnType("character varying(20)")
                        .HasComment("Llave primaria del sistema version 1")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 587, DateTimeKind.Local).AddTicks(2816));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("character varying(150)")
                        .HasComment("Descripcion de la inclusion")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasComment("Nombre de la inclusion")
                        .HasMaxLength(150);

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("character(1)")
                        .IsFixedLength(true)
                        .HasComment("Estado A: Activo, I: Inactivo, X: Eliminado")
                        .HasMaxLength(1)
                        .HasDefaultValue("A");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ge_inclusions");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Generals.LanguageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Abbreviature")
                        .IsRequired()
                        .HasColumnName("abbreviature")
                        .HasColumnType("character varying(5)")
                        .HasComment("Abreviatura del idioma")
                        .HasMaxLength(5);

                    b.Property<string>("CodeSetra")
                        .HasColumnName("code_setra")
                        .HasColumnType("character varying(20)")
                        .HasComment("Llave primaria del sistema version 1")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 595, DateTimeKind.Local).AddTicks(4950));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasComment("Nombre del idioma")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ge_languages");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Generals.LocationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(5)")
                        .HasComment("Codigo de la ubicacion")
                        .HasMaxLength(5);

                    b.Property<string>("CodeSetra")
                        .HasColumnName("code_setra")
                        .HasColumnType("character varying(20)")
                        .HasComment("Llave primaria del sistema version 1")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 571, DateTimeKind.Local).AddTicks(9707));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDestination")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_destination")
                        .HasColumnType("boolean")
                        .HasComment("Indicador para verificar si es un destino de servicio")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasComment("Nombre de la ubicacion")
                        .HasMaxLength(150);

                    b.Property<int?>("ReferenceId")
                        .HasColumnName("ge_location_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con ge_locations, recursividad - opcional");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("character(1)")
                        .IsFixedLength(true)
                        .HasComment("Estado A: Activo, I: Inactivo, X: Eliminado")
                        .HasMaxLength(1)
                        .HasDefaultValue("A");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("character(1)")
                        .IsFixedLength(true)
                        .HasComment("Tipo de ubigeo P: Pais, C: Ciudad")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ReferenceId");

                    b.ToTable("ge_locations");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Generals.RestrictionTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(8)")
                        .HasComment("Codigo del mercado")
                        .HasMaxLength(8);

                    b.Property<string>("CodeSetra")
                        .HasColumnName("code_setra")
                        .HasColumnType("character varying(20)")
                        .HasComment("Llave primaria del sistema version 1")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 590, DateTimeKind.Local).AddTicks(608));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasComment("Nombre del mercado")
                        .HasMaxLength(150);

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("character(1)")
                        .IsFixedLength(true)
                        .HasComment("Estado A: Activo, I: Inactivo, X: Eliminado")
                        .HasMaxLength(1)
                        .HasDefaultValue("A");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ge_restriction_types");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Generals.SegmentationMarketEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 552, DateTimeKind.Local).AddTicks(9399));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("character varying(150)")
                        .HasComment("Descripcion detallada de la segmentacion de mercado")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasComment("Nombre de la segmentacion de mercado o cliente")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ge_segmentation_markets");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Generals.ServiceTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CodeSetra")
                        .HasColumnName("code_setra")
                        .HasColumnType("character varying(20)")
                        .HasComment("Llave primaria del sistema version 1")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 592, DateTimeKind.Local).AddTicks(9326));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text")
                        .HasComment("Descripcion detallada del estado del proveedor");

                    b.Property<bool>("IsInternal")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_internal")
                        .HasColumnType("boolean")
                        .HasComment("Flag para verificar si el tipo de servicio es de uso interno")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasComment("Nombre del estado del proveedor")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ge_service_types");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Providers.ProviderChainEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CodeSetra")
                        .HasColumnName("code_setra")
                        .HasColumnType("character varying(20)")
                        .HasComment("Llave primaria del sistema version 1")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 629, DateTimeKind.Local).AddTicks(2372));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasComment("Nombre de la candena del proveedor")
                        .HasMaxLength(150);

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("character(1)")
                        .IsFixedLength(true)
                        .HasComment("Estado del proveedor A: Activo, I: Inactivo, X: Eliminado")
                        .HasMaxLength(1)
                        .HasDefaultValue("A");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("pr_chains");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Providers.ProviderContactEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("ContactId")
                        .HasColumnName("co_contact_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con tabla co_contacts");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 635, DateTimeKind.Local).AddTicks(643));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<int>("ProviderId")
                        .HasColumnName("pr_provider_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con tabla pr_providers");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("ProviderId");

                    b.ToTable("pr_provider_contacts");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Providers.ProviderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("text")
                        .HasComment("Dirección fiscal del proveedor");

                    b.Property<int>("CityId")
                        .HasColumnName("ge_city_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con ge_locations");

                    b.Property<string>("CodeSetra")
                        .HasColumnName("code_setra")
                        .HasColumnType("character varying(20)")
                        .HasComment("Llave primaria del sistema version 1")
                        .HasMaxLength(20);

                    b.Property<int>("CountryId")
                        .HasColumnName("ge_country_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con ge_locations");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 614, DateTimeKind.Local).AddTicks(3773));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<int>("DocumentId")
                        .HasColumnName("ge_document_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con ge_general");

                    b.Property<string>("LegalName")
                        .IsRequired()
                        .HasColumnName("legal_name")
                        .HasColumnType("character varying(120)")
                        .HasComment("Razon social del proveedor")
                        .HasMaxLength(120);

                    b.Property<string>("PartnerzoneLink")
                        .HasColumnName("partner_zone_link")
                        .HasColumnType("character(100)")
                        .IsFixedLength(true)
                        .HasComment("Sitio web como agente del proveedor")
                        .HasMaxLength(100);

                    b.Property<string>("PartnerzonePassword")
                        .HasColumnName("partner_zone_password")
                        .HasColumnType("character(100)")
                        .IsFixedLength(true)
                        .HasComment("Credencial como agente del proveedor")
                        .HasMaxLength(100);

                    b.Property<string>("PartnerzoneUsername")
                        .HasColumnName("partner_zone_username")
                        .HasColumnType("character(100)")
                        .IsFixedLength(true)
                        .HasComment("Credencial como agente del proveedor")
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("character varying(25)")
                        .HasComment("Número de telefono fiscal del proveedor")
                        .HasMaxLength(25);

                    b.Property<int?>("ProviderChainId")
                        .HasColumnName("pr_chain_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con pr_chains opcional");

                    b.Property<int>("ProviderStatusId")
                        .HasColumnName("pr_status_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con pr_status");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnName("registration_number")
                        .HasColumnType("character varying(30)")
                        .HasComment("Documento fiscal del proveedor")
                        .HasMaxLength(30);

                    b.Property<string>("TradingName")
                        .IsRequired()
                        .HasColumnName("trading_name")
                        .HasColumnType("character varying(120)")
                        .HasComment("Razon comercial del proveedor")
                        .HasMaxLength(120);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Website")
                        .HasColumnName("website")
                        .HasColumnType("character(100)")
                        .IsFixedLength(true)
                        .HasComment("Sitio web oficial del proveedor")
                        .HasMaxLength(100);

                    b.Property<string>("ZipCode")
                        .HasColumnName("zip_code")
                        .HasColumnType("character varying(30)")
                        .HasComment("Código postal del proveedor")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ProviderChainId");

                    b.HasIndex("ProviderStatusId");

                    b.HasIndex("RegistrationNumber")
                        .IsUnique();

                    b.ToTable("pr_providers");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Providers.ProviderStatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 631, DateTimeKind.Local).AddTicks(9603));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text")
                        .HasComment("Descripcion detallada del estado del proveedor");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasComment("Nombre del estado del proveedor")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("pr_status");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Rates.RateBlackoutEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 705, DateTimeKind.Local).AddTicks(9111));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateIn")
                        .HasColumnName("data_in")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Blackout fecha inicio");

                    b.Property<DateTime>("DateOut")
                        .HasColumnName("data_out")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Blackout fecha final");

                    b.Property<int>("RateId")
                        .HasColumnName("ra_rate_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con ra_rates");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("RateId");

                    b.ToTable("ra_rate_blackouts");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Rates.RateDateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime?>("BookingDateEnd")
                        .IsRequired()
                        .HasColumnName("booking_date_end")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha final para la compra");

                    b.Property<DateTime?>("BookingDateStart")
                        .IsRequired()
                        .HasColumnName("booking_date_start")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de inicio para la compra");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 693, DateTimeKind.Local).AddTicks(7066));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<int>("RateId")
                        .HasColumnName("ra_rate_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con se_details");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("character(1)")
                        .IsFixedLength(true)
                        .HasComment("Estado A: Activo, I: Inactivo, X: Eliminado")
                        .HasMaxLength(1)
                        .HasDefaultValue("A");

                    b.Property<DateTime>("TravelDateEnd")
                        .HasColumnName("travel_date_end")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha final de la vigencia");

                    b.Property<DateTime>("TravelDateStart")
                        .HasColumnName("travel_date_start")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de inicio de la vigencia");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("RateId");

                    b.ToTable("ra_rate_dates");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Rates.RateDayEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 702, DateTimeKind.Local).AddTicks(4581));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<int>("NumDay")
                        .HasColumnName("num_day")
                        .HasColumnType("integer")
                        .HasComment("Número de día de la semana");

                    b.Property<int>("RateId")
                        .HasColumnName("ra_rate_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con ra_rates");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("RateId");

                    b.ToTable("ra_rate_days");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Rates.RateDetailEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("AccommodationId")
                        .HasColumnName("ge_accommodation_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con ge_accommodations");

                    b.Property<decimal>("Cost")
                        .HasColumnName("cost")
                        .HasColumnType("numeric")
                        .HasComment("Costo");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 687, DateTimeKind.Local).AddTicks(811));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<int?>("CurrencyEntityId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Estimated")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsEditable")
                        .HasColumnName("is_editable")
                        .HasColumnType("boolean")
                        .HasComment("Flag para permitir editar los precios fuera de tarifa");

                    b.Property<decimal>("Margin")
                        .HasColumnType("numeric");

                    b.Property<int>("RateId")
                        .HasColumnName("ra_rate_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con ra_rates");

                    b.Property<decimal>("SalePrice")
                        .HasColumnName("sale_price")
                        .HasColumnType("numeric")
                        .HasComment("Precio de venta");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("character(1)")
                        .IsFixedLength(true)
                        .HasComment("Estado A: Activo, I: Inactivo, X: Eliminado")
                        .HasMaxLength(1)
                        .HasDefaultValue("A");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AccommodationId");

                    b.HasIndex("CurrencyEntityId");

                    b.HasIndex("RateId");

                    b.ToTable("ra_rate_details");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Rates.RateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(120)")
                        .HasComment("Codigo auto generado por el sistema")
                        .HasMaxLength(120);

                    b.Property<string>("CodeSetra")
                        .HasColumnName("code_setra")
                        .HasColumnType("character varying(20)")
                        .HasComment("Llave primaria del sistema version 1")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 698, DateTimeKind.Local).AddTicks(5258));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<int>("CurrencyId")
                        .HasColumnName("ge_currency_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con ge_currency");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("character varying(30)")
                        .HasComment("Descripcion detallada del servicio")
                        .HasMaxLength(30);

                    b.Property<decimal>("Estimated")
                        .HasColumnName("estimated")
                        .HasColumnType("numeric")
                        .HasComment("Margen de estimacion o preyeccion");

                    b.Property<string>("Link")
                        .HasColumnName("link")
                        .HasColumnType("text")
                        .HasComment("Link de enlace al documento de tarifa del proveedor");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(120)")
                        .HasComment("Nombre del servicio")
                        .HasMaxLength(120);

                    b.Property<int>("RateStatusId")
                        .HasColumnName("ra_status_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con ra_status");

                    b.Property<int>("ServiceDetailId")
                        .HasColumnName("se_detail_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con se_details");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("RateStatusId");

                    b.HasIndex("ServiceDetailId");

                    b.ToTable("ra_rates");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Rates.RateInclusionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 709, DateTimeKind.Local).AddTicks(4403));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<int>("InclusionId")
                        .HasColumnName("ge_inclusion_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con ge_inclusions");

                    b.Property<int>("RateId")
                        .HasColumnName("ra_rate_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con ra_rates");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("InclusionId");

                    b.HasIndex("RateId");

                    b.ToTable("ra_rate_inclusions");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Rates.RateRestrictionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("RateId")
                        .HasColumnType("integer");

                    b.Property<int>("RestrictionId")
                        .HasColumnType("integer");

                    b.Property<int?>("RestrictionTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RateId");

                    b.HasIndex("RestrictionTypeId");

                    b.ToTable("RateRestrictionEntity");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Rates.RateStatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 683, DateTimeKind.Local).AddTicks(354));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text")
                        .HasComment("Descripcion detallada del estado del proveedor");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasComment("Nombre del estado del proveedor")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ra_status");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Rates.RateTaxEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 713, DateTimeKind.Local).AddTicks(8751));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<bool>("Is_Included")
                        .HasColumnName("is_included")
                        .HasColumnType("boolean")
                        .HasComment("Indicador para verificar si el impuesto esta incluido");

                    b.Property<int>("RateId")
                        .HasColumnName("ra_rate_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con la tabla ra_rates");

                    b.Property<int>("TaxId")
                        .HasColumnName("ta_tax_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con la tabla ta_taxes");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.Property<decimal>("Value")
                        .HasColumnName("value")
                        .HasColumnType("numeric")
                        .HasComment("Valor del impuesto");

                    b.HasKey("Id");

                    b.HasIndex("RateId");

                    b.HasIndex("TaxId");

                    b.ToTable("ra_rate_taxes");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Services.ServiceDescriptionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 680, DateTimeKind.Local).AddTicks(5008));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<int>("LanguageId")
                        .HasColumnName("ge_language_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con la tabla ge_languages");

                    b.Property<int>("ServiceId")
                        .HasColumnName("se_service_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con la tabla se_services");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ServiceId");

                    b.ToTable("se_service_descriptions");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Services.ServiceDetailAdditionalEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("AdditionalId")
                        .HasColumnName("ge_additional_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con tabla ge_additionals");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 677, DateTimeKind.Local).AddTicks(1809));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<int>("ServiceDetailId")
                        .HasColumnName("se_detail_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con tabla se_details");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AdditionalId");

                    b.HasIndex("ServiceDetailId");

                    b.ToTable("se_service_detail_additionals");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Services.ServiceDetailEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("AgeMaxChild")
                        .HasColumnName("age_max_child")
                        .HasColumnType("integer")
                        .HasComment("Edad maxima para el niño");

                    b.Property<int>("CapacityMax")
                        .HasColumnName("capacity_max")
                        .HasColumnType("integer")
                        .HasComment("Capacidad maxima de personas en el servicio");

                    b.Property<int>("CapacityMaxAdult")
                        .HasColumnName("capacity_max_adult")
                        .HasColumnType("integer")
                        .HasComment("Capacidad maxima de adultos en el servicio");

                    b.Property<int>("CapacityMaxChild")
                        .HasColumnName("capacity_max_child")
                        .HasColumnType("integer")
                        .HasComment("Capacidad maxima de niños en el servicio");

                    b.Property<string>("CodeSetra")
                        .HasColumnName("code_setra")
                        .HasColumnType("character varying(20)")
                        .HasComment("Llave primaria del sistema version 1")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 658, DateTimeKind.Local).AddTicks(4617));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("character varying(30)")
                        .HasComment("Descripcion detallada del servicio")
                        .HasMaxLength(30);

                    b.Property<bool>("IsExtraCostChild")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_extra_cost_child")
                        .HasColumnType("boolean")
                        .HasComment("Flag para agregar el costo extra para el niño")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(120)")
                        .HasComment("Nombre del servicio")
                        .HasMaxLength(120);

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnName("note")
                        .HasColumnType("text")
                        .HasComment("Notas adicionales del servicio");

                    b.Property<int>("ServiceId")
                        .HasColumnName("se_service_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con se_service_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("se_service_details");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Services.ServiceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("text")
                        .HasComment("Dirección fiscal del proveedor");

                    b.Property<int>("CategoryServiceId")
                        .HasColumnName("ge_category_service_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con ge_category_services");

                    b.Property<int>("CategorySetoursId")
                        .HasColumnName("ge_category_setours_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con ge_category_setours");

                    b.Property<int>("CityId")
                        .HasColumnName("ge_city_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con ge_locations");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(120)")
                        .HasComment("Codigo auto generado por el sistema")
                        .HasMaxLength(120);

                    b.Property<string>("CodeSetra")
                        .HasColumnName("code_setra")
                        .HasColumnType("character varying(20)")
                        .HasComment("Llave primaria del sistema version 1")
                        .HasMaxLength(20);

                    b.Property<int>("CountryId")
                        .HasColumnName("ge_country_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con ge_locations");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 666, DateTimeKind.Local).AddTicks(4945));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<bool>("IsOnlineRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_online_rate")
                        .HasColumnType("boolean")
                        .HasComment("Flag para mostrar el servicios a clientes externos")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPreferred")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_preferred")
                        .HasColumnType("boolean")
                        .HasComment("Flag para mostrar el servicios a clientes externos")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(120)")
                        .HasComment("Nombre del servicio")
                        .HasMaxLength(120);

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnName("note")
                        .HasColumnType("text")
                        .HasComment("Notas adicionales del servicio");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("character varying(25)")
                        .HasComment("Número de telefono fiscal del proveedor")
                        .HasMaxLength(25);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("pr_provider_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con pr_providers opcional");

                    b.Property<int>("ServiceStatusId")
                        .HasColumnName("se_status_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con se_status");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnName("se_type_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con se_types");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Website")
                        .HasColumnName("website")
                        .HasColumnType("character(100)")
                        .IsFixedLength(true)
                        .HasComment("Sitio web oficial del proveedor")
                        .HasMaxLength(100);

                    b.Property<string>("ZipCode")
                        .HasColumnName("zip_code")
                        .HasColumnType("character varying(30)")
                        .HasComment("Código postal del proveedor")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("CategoryServiceId");

                    b.HasIndex("CategorySetoursId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("ServiceStatusId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("se_services");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Services.ServiceStatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 654, DateTimeKind.Local).AddTicks(1056));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text")
                        .HasComment("Descripcion detallada del estado del proveedor");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasComment("Nombre del estado del proveedor")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("se_status");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Taxes.TaxDetailEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("CountryId")
                        .HasColumnName("ge_country_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con la tabla ge_locations");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 607, DateTimeKind.Local).AddTicks(418));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<int>("TaxId")
                        .HasColumnName("ta_tax_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con la tabla ta_taxes");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.Property<decimal>("Value")
                        .HasColumnName("value")
                        .HasColumnType("numeric")
                        .HasComment("Valor del impuesto");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("TaxId");

                    b.ToTable("ta_tax_details");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Taxes.TaxEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnName("abbreviation")
                        .HasColumnType("character varying(10)")
                        .HasComment("Abreviatura del tipo de impuesto")
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 21, 14, 10, 43, 602, DateTimeKind.Local).AddTicks(9053));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text")
                        .HasComment("Description del tipo de impuesto");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasComment("Nombre del tipo de impuesto")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ta_taxes");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Contacts.ContactDataEntity", b =>
                {
                    b.HasOne("setours.jarvis.domain.entity.Contacts.ContactEntity", "Contact")
                        .WithMany("ContactDatas")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("setours.jarvis.domain.entity.Contacts.ContactMediaEntity", "ContactMedia")
                        .WithMany("ContactDatas")
                        .HasForeignKey("ContactMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Contacts.ContactDetailEntity", b =>
                {
                    b.HasOne("setours.jarvis.domain.entity.Contacts.ContactEntity", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("setours.jarvis.domain.entity.Generals.SegmentationMarketEntity", "SegmentationMarket")
                        .WithMany("ContactDetail")
                        .HasForeignKey("SegmentationMarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Contacts.ContactEntity", b =>
                {
                    b.HasOne("setours.jarvis.domain.entity.Contacts.ContactTypeEntity", "ContactType")
                        .WithMany("Contacts")
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Generals.LocationEntity", b =>
                {
                    b.HasOne("setours.jarvis.domain.entity.Generals.LocationEntity", "Location")
                        .WithMany("Locations")
                        .HasForeignKey("ReferenceId");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Providers.ProviderContactEntity", b =>
                {
                    b.HasOne("setours.jarvis.domain.entity.Contacts.ContactEntity", "Contanct")
                        .WithMany("ProviderContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("setours.jarvis.domain.entity.Providers.ProviderEntity", "Provider")
                        .WithMany("ProviderContacts")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Providers.ProviderEntity", b =>
                {
                    b.HasOne("setours.jarvis.domain.entity.Generals.LocationEntity", "City")
                        .WithMany("CityProviders")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("setours.jarvis.domain.entity.Generals.LocationEntity", "Country")
                        .WithMany("CountryProviders")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("setours.jarvis.domain.entity.Generals.DocumentTypeEntity", "DocumentType")
                        .WithMany("Providers")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("setours.jarvis.domain.entity.Providers.ProviderChainEntity", "ProviderChain")
                        .WithMany("Providers")
                        .HasForeignKey("ProviderChainId");

                    b.HasOne("setours.jarvis.domain.entity.Providers.ProviderStatusEntity", "Status")
                        .WithMany("Providers")
                        .HasForeignKey("ProviderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Rates.RateBlackoutEntity", b =>
                {
                    b.HasOne("setours.jarvis.domain.entity.Rates.RateEntity", "Rate")
                        .WithMany("RateBlackouts")
                        .HasForeignKey("RateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Rates.RateDateEntity", b =>
                {
                    b.HasOne("setours.jarvis.domain.entity.Rates.RateEntity", "Rate")
                        .WithMany("RateDates")
                        .HasForeignKey("RateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Rates.RateDayEntity", b =>
                {
                    b.HasOne("setours.jarvis.domain.entity.Rates.RateEntity", "Rate")
                        .WithMany("RateDays")
                        .HasForeignKey("RateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Rates.RateDetailEntity", b =>
                {
                    b.HasOne("setours.jarvis.domain.entity.Generals.AccommodationEntity", "Accommodation")
                        .WithMany("RateDetails")
                        .HasForeignKey("AccommodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("setours.jarvis.domain.entity.Generals.CurrencyEntity", null)
                        .WithMany("RateDetails")
                        .HasForeignKey("CurrencyEntityId");

                    b.HasOne("setours.jarvis.domain.entity.Rates.RateEntity", "Rate")
                        .WithMany("RateDetails")
                        .HasForeignKey("RateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Rates.RateEntity", b =>
                {
                    b.HasOne("setours.jarvis.domain.entity.Generals.CurrencyEntity", "Currency")
                        .WithMany("Rates")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("setours.jarvis.domain.entity.Rates.RateStatusEntity", "RateStatus")
                        .WithMany("Rates")
                        .HasForeignKey("RateStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("setours.jarvis.domain.entity.Services.ServiceDetailEntity", "ServiceDetail")
                        .WithMany("Rates")
                        .HasForeignKey("ServiceDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Rates.RateInclusionEntity", b =>
                {
                    b.HasOne("setours.jarvis.domain.entity.Generals.InclusionEntity", "Inclusion")
                        .WithMany("RateInclusions")
                        .HasForeignKey("InclusionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("setours.jarvis.domain.entity.Rates.RateEntity", "Rate")
                        .WithMany("RateInclusions")
                        .HasForeignKey("RateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Rates.RateRestrictionEntity", b =>
                {
                    b.HasOne("setours.jarvis.domain.entity.Rates.RateEntity", "Rate")
                        .WithMany("RateRestrictions")
                        .HasForeignKey("RateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("setours.jarvis.domain.entity.Generals.RestrictionTypeEntity", "RestrictionType")
                        .WithMany("RateRestrictions")
                        .HasForeignKey("RestrictionTypeId");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Rates.RateTaxEntity", b =>
                {
                    b.HasOne("setours.jarvis.domain.entity.Rates.RateEntity", "Rate")
                        .WithMany("RateTaxes")
                        .HasForeignKey("RateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("setours.jarvis.domain.entity.Taxes.TaxEntity", "Tax")
                        .WithMany("RateTaxes")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Services.ServiceDescriptionEntity", b =>
                {
                    b.HasOne("setours.jarvis.domain.entity.Generals.LanguageEntity", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("setours.jarvis.domain.entity.Services.ServiceEntity", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Services.ServiceDetailAdditionalEntity", b =>
                {
                    b.HasOne("setours.jarvis.domain.entity.Generals.AdditionalEntity", "Additional")
                        .WithMany("ServiceDetailAdditionals")
                        .HasForeignKey("AdditionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("setours.jarvis.domain.entity.Services.ServiceDetailEntity", "ServiceDetail")
                        .WithMany("ServiceDetailAdditionals")
                        .HasForeignKey("ServiceDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Services.ServiceDetailEntity", b =>
                {
                    b.HasOne("setours.jarvis.domain.entity.Services.ServiceEntity", "Service")
                        .WithMany("ServiceDetails")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Services.ServiceEntity", b =>
                {
                    b.HasOne("setours.jarvis.domain.entity.Generals.CategoryServiceEntity", "CategoryService")
                        .WithMany("Services")
                        .HasForeignKey("CategoryServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("setours.jarvis.domain.entity.Generals.CategorySetoursEntity", "CategorySetours")
                        .WithMany("Services")
                        .HasForeignKey("CategorySetoursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("setours.jarvis.domain.entity.Generals.LocationEntity", "City")
                        .WithMany("CityServices")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("setours.jarvis.domain.entity.Generals.LocationEntity", "Country")
                        .WithMany("CountryServices")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("setours.jarvis.domain.entity.Providers.ProviderEntity", "Provider")
                        .WithMany("Services")
                        .HasForeignKey("ProviderId");

                    b.HasOne("setours.jarvis.domain.entity.Services.ServiceStatusEntity", "ServiceStatus")
                        .WithMany("Services")
                        .HasForeignKey("ServiceStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("setours.jarvis.domain.entity.Generals.ServiceTypeEntity", "ServiceType")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Taxes.TaxDetailEntity", b =>
                {
                    b.HasOne("setours.jarvis.domain.entity.Generals.LocationEntity", "Country")
                        .WithMany("CountryTaxes")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("setours.jarvis.domain.entity.Taxes.TaxEntity", "Tax")
                        .WithMany("TaxDetails")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
