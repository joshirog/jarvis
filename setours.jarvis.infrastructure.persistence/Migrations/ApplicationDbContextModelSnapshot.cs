// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using setours.jarvis.infrastructure.persistence;

namespace setours.jarvis.infrastructure.persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("setours.jarvis.domain.entity.Generals.CurrencyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnName("abbreviation")
                        .HasColumnType("character varying(8)")
                        .HasComment("Nombre corto de la moneda")
                        .HasMaxLength(8);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(8)")
                        .HasComment("Codigo del la moneda")
                        .HasMaxLength(8);

                    b.Property<string>("CodeSetra")
                        .HasColumnName("code_setra")
                        .HasColumnType("character varying(20)")
                        .HasComment("Llave primaria del sistema version 1")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 14, 21, 47, 15, 51, DateTimeKind.Local).AddTicks(9390));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasComment("Nombre de la moneda")
                        .HasMaxLength(150);

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("character(1)")
                        .IsFixedLength(true)
                        .HasComment("Estado A: Activo, I: Inactivo, X: Eliminado")
                        .HasMaxLength(1)
                        .HasDefaultValue("A");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ge_currency");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Generals.DocumentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnName("abbreviation")
                        .HasColumnType("character varying(8)")
                        .HasComment("Abreviatura del tipo de documento")
                        .HasMaxLength(8);

                    b.Property<string>("CodeSetra")
                        .HasColumnName("code_setra")
                        .HasColumnType("character varying(20)")
                        .HasComment("Llave primaria del sistema version 1")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 14, 21, 47, 15, 89, DateTimeKind.Local).AddTicks(2540));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasComment("Nombre del tipo de documento")
                        .HasMaxLength(150);

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("character(1)")
                        .IsFixedLength(true)
                        .HasComment("Estado A: Activo, I: Inactivo, X: Eliminado")
                        .HasMaxLength(1)
                        .HasDefaultValue("A");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ge_documents");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Generals.LocationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(5)")
                        .HasComment("Codigo de la ubicacion")
                        .HasMaxLength(5);

                    b.Property<string>("CodeSetra")
                        .HasColumnName("code_setra")
                        .HasColumnType("character varying(20)")
                        .HasComment("Llave primaria del sistema version 1")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 14, 21, 47, 15, 96, DateTimeKind.Local).AddTicks(5990));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasComment("Nombre de la ubicacion")
                        .HasMaxLength(150);

                    b.Property<int?>("ReferenceId")
                        .HasColumnName("ge_location_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con ge_locations, recursividad - opcional");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("character(1)")
                        .IsFixedLength(true)
                        .HasComment("Estado A: Activo, I: Inactivo, X: Eliminado")
                        .HasMaxLength(1)
                        .HasDefaultValue("A");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("character(1)")
                        .IsFixedLength(true)
                        .HasComment("Tipo de ubigeo P: Pais, C: Ciudad")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ReferenceId");

                    b.ToTable("ge_locations");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Generals.OccupationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnName("abbreviation")
                        .HasColumnType("character varying(8)")
                        .HasComment("Abreviatura de la ocupacion")
                        .HasMaxLength(8);

                    b.Property<string>("CodeSetra")
                        .HasColumnName("code_setra")
                        .HasColumnType("character varying(20)")
                        .HasComment("Llave primaria del sistema version 1")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 14, 21, 47, 15, 92, DateTimeKind.Local).AddTicks(4130));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("character varying(150)")
                        .HasComment("Descripcion de la ocupacion del servicio o tarifa")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasComment("Nombre de la ocupacion")
                        .HasMaxLength(150);

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("character(1)")
                        .IsFixedLength(true)
                        .HasComment("Estado A: Activo, I: Inactivo, X: Eliminado")
                        .HasMaxLength(1)
                        .HasDefaultValue("A");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ge_occupation");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Providers.ProviderChainEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CodeSetra")
                        .HasColumnName("code_setra")
                        .HasColumnType("character varying(20)")
                        .HasComment("Llave primaria del sistema version 1")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 14, 21, 47, 15, 129, DateTimeKind.Local).AddTicks(6480));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasComment("Nombre de la candena del proveedor")
                        .HasMaxLength(150);

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("character(1)")
                        .IsFixedLength(true)
                        .HasComment("Estado del proveedor A: Activo, I: Inactivo, X: Eliminado")
                        .HasMaxLength(1)
                        .HasDefaultValue("A");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("pr_chains");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Providers.ProviderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("text")
                        .HasComment("Dirección fiscal del proveedor");

                    b.Property<int>("CityId")
                        .HasColumnName("ge_city_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con ge_locations");

                    b.Property<string>("CodeSetra")
                        .HasColumnName("code_setra")
                        .HasColumnType("character varying(20)")
                        .HasComment("Llave primaria del sistema version 1")
                        .HasMaxLength(20);

                    b.Property<int>("CountryId")
                        .HasColumnName("ge_country_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con ge_locations");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 14, 21, 47, 15, 113, DateTimeKind.Local).AddTicks(2590));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<int>("DocumentId")
                        .HasColumnName("ge_document_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con ge_general");

                    b.Property<string>("LegalName")
                        .IsRequired()
                        .HasColumnName("legal_name")
                        .HasColumnType("character varying(120)")
                        .HasComment("Razon social del proveedor")
                        .HasMaxLength(120);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("character varying(25)")
                        .HasComment("Número de telefono fiscal del proveedor")
                        .HasMaxLength(25);

                    b.Property<int?>("ProviderChainId")
                        .HasColumnName("pr_chain_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con pr_chains opcional");

                    b.Property<int>("ProviderStatusId")
                        .HasColumnName("pr_status_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con pr_status");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnName("registration_number")
                        .HasColumnType("character varying(30)")
                        .HasComment("Documento fiscal del proveedor")
                        .HasMaxLength(30);

                    b.Property<string>("TradingName")
                        .IsRequired()
                        .HasColumnName("trading_name")
                        .HasColumnType("character varying(120)")
                        .HasComment("Razon comercial del proveedor")
                        .HasMaxLength(120);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Website")
                        .HasColumnName("website")
                        .HasColumnType("character(100)")
                        .IsFixedLength(true)
                        .HasComment("Sitio web oficial del proveedor")
                        .HasMaxLength(100);

                    b.Property<string>("ZipCode")
                        .HasColumnName("zip_code")
                        .HasColumnType("character varying(30)")
                        .HasComment("Código postal del proveedor")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ProviderChainId");

                    b.HasIndex("ProviderStatusId");

                    b.HasIndex("RegistrationNumber")
                        .IsUnique();

                    b.ToTable("pr_providers");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Providers.ProviderStatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 14, 21, 47, 15, 135, DateTimeKind.Local).AddTicks(7160));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text")
                        .HasComment("Descripcion detallada del estado del proveedor");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasComment("Nombre del estado del proveedor")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("pr_status");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Rates.RateDateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime?>("BookingDateEnd")
                        .IsRequired()
                        .HasColumnName("booking_date_end")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha final para la compra");

                    b.Property<DateTime?>("BookingDateStart")
                        .IsRequired()
                        .HasColumnName("booking_date_start")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de inicio para la compra");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 14, 21, 47, 15, 183, DateTimeKind.Local).AddTicks(4450));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<int>("RateId")
                        .HasColumnName("ra_rate_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con se_details");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("character(1)")
                        .IsFixedLength(true)
                        .HasComment("Estado A: Activo, I: Inactivo, X: Eliminado")
                        .HasMaxLength(1)
                        .HasDefaultValue("A");

                    b.Property<DateTime>("TravelDateEnd")
                        .HasColumnName("travel_date_end")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha final de la vigencia");

                    b.Property<DateTime>("TravelDateStart")
                        .HasColumnName("travel_date_start")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de inicio de la vigencia");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("RateId");

                    b.ToTable("ra_dates");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Rates.RateDetailEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<decimal>("Cost")
                        .HasColumnName("cost")
                        .HasColumnType("numeric")
                        .HasComment("Costo");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 14, 21, 47, 15, 177, DateTimeKind.Local).AddTicks(800));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<int>("CurrencyId")
                        .HasColumnName("ge_currency_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con ge_currency");

                    b.Property<bool>("IsEditable")
                        .HasColumnName("is_editable")
                        .HasColumnType("boolean")
                        .HasComment("Flag para permitir editar los precios fuera de tarifa");

                    b.Property<int>("OccupationId")
                        .HasColumnName("ge_occupancy_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con ge_occupancy");

                    b.Property<int>("RateDateId")
                        .HasColumnName("ra_date_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con ra_date_id");

                    b.Property<decimal>("SalePrice")
                        .HasColumnName("sale_price")
                        .HasColumnType("numeric")
                        .HasComment("Precio de venta");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("character(1)")
                        .IsFixedLength(true)
                        .HasComment("Estado A: Activo, I: Inactivo, X: Eliminado")
                        .HasMaxLength(1)
                        .HasDefaultValue("A");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("OccupationId");

                    b.HasIndex("RateDateId");

                    b.ToTable("ra_details");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Rates.RateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(120)")
                        .HasComment("Codigo auto generado por el sistema")
                        .HasMaxLength(120);

                    b.Property<string>("CodeSetra")
                        .HasColumnName("code_setra")
                        .HasColumnType("character varying(20)")
                        .HasComment("Llave primaria del sistema version 1")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 14, 21, 47, 15, 190, DateTimeKind.Local).AddTicks(2200));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("character varying(30)")
                        .HasComment("Descripcion detallada del servicio")
                        .HasMaxLength(30);

                    b.Property<string>("Link")
                        .HasColumnName("link")
                        .HasColumnType("text")
                        .HasComment("Link de enlace al documento de tarifa del proveedor");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(120)")
                        .HasComment("Nombre del servicio")
                        .HasMaxLength(120);

                    b.Property<int>("RateStatusId")
                        .HasColumnName("ra_status_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con ra_status");

                    b.Property<int>("ServiceDetailId")
                        .HasColumnName("se_detail_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con se_details");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("RateStatusId");

                    b.HasIndex("ServiceDetailId");

                    b.ToTable("ra_rates");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Rates.RateStatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 14, 21, 47, 15, 172, DateTimeKind.Local).AddTicks(5850));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text")
                        .HasComment("Descripcion detallada del estado del proveedor");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasComment("Nombre del estado del proveedor")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ra_status");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Services.ServiceDetailEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("CapacityMax")
                        .HasColumnName("capacity_max")
                        .HasColumnType("integer")
                        .HasComment("Capacidad maxima de personas en el servicio");

                    b.Property<int>("CapacityMaxAdult")
                        .HasColumnName("capacity_max_adult")
                        .HasColumnType("integer")
                        .HasComment("Capacidad maxima de adultos en el servicio");

                    b.Property<int>("CapacityMaxChild")
                        .HasColumnName("capacity_max_child")
                        .HasColumnType("integer")
                        .HasComment("Capacidad maxima de niños en el servicio");

                    b.Property<string>("CodeSetra")
                        .HasColumnName("code_setra")
                        .HasColumnType("character varying(20)")
                        .HasComment("Llave primaria del sistema version 1")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 14, 21, 47, 15, 145, DateTimeKind.Local).AddTicks(9890));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("character varying(30)")
                        .HasComment("Descripcion detallada del servicio")
                        .HasMaxLength(30);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(120)")
                        .HasComment("Nombre del servicio")
                        .HasMaxLength(120);

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnName("note")
                        .HasColumnType("text")
                        .HasComment("Notas adicionales del servicio");

                    b.Property<int>("ServiceId")
                        .HasColumnName("se_service_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con se_service_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("se_details");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Services.ServiceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("text")
                        .HasComment("Dirección fiscal del proveedor");

                    b.Property<int>("CityId")
                        .HasColumnName("ge_city_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con ge_locations");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(120)")
                        .HasComment("Codigo auto generado por el sistema")
                        .HasMaxLength(120);

                    b.Property<string>("CodeSetra")
                        .HasColumnName("code_setra")
                        .HasColumnType("character varying(20)")
                        .HasComment("Llave primaria del sistema version 1")
                        .HasMaxLength(20);

                    b.Property<int>("CountryId")
                        .HasColumnName("ge_country_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con ge_locations");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 14, 21, 47, 15, 157, DateTimeKind.Local).AddTicks(3340));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("character varying(30)")
                        .HasComment("Descripcion detallada del servicio")
                        .HasMaxLength(30);

                    b.Property<bool>("IsOnlineRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_online_rate")
                        .HasColumnType("boolean")
                        .HasComment("Flag para mostrar el servicios a clientes externos")
                        .HasMaxLength(100)
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPreferred")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_preferred")
                        .HasColumnType("boolean")
                        .HasComment("Flag para mostrar el servicios a clientes externos")
                        .HasMaxLength(100)
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(120)")
                        .HasComment("Nombre del servicio")
                        .HasMaxLength(120);

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnName("note")
                        .HasColumnType("text")
                        .HasComment("Notas adicionales del servicio");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("character varying(25)")
                        .HasComment("Número de telefono fiscal del proveedor")
                        .HasMaxLength(25);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("pr_provider_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con pr_providers opcional");

                    b.Property<int>("ServiceStatusId")
                        .HasColumnName("se_status_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con se_status");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnName("se_type_id")
                        .HasColumnType("integer")
                        .HasComment("Llave foranea con se_types");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Website")
                        .HasColumnName("website")
                        .HasColumnType("character(100)")
                        .IsFixedLength(true)
                        .HasComment("Sitio web oficial del proveedor")
                        .HasMaxLength(100);

                    b.Property<string>("ZipCode")
                        .HasColumnName("zip_code")
                        .HasColumnType("character varying(30)")
                        .HasComment("Código postal del proveedor")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("ServiceStatusId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("se_services");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Services.ServiceStatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 14, 21, 47, 15, 138, DateTimeKind.Local).AddTicks(3910));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text")
                        .HasComment("Descripcion detallada del estado del proveedor");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasComment("Nombre del estado del proveedor")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("se_status");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Services.ServiceTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasComment("Llave primaria de la tabla")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CodeSetra")
                        .HasColumnName("code_setra")
                        .HasColumnType("character varying(20)")
                        .HasComment("Llave primaria del sistema version 1")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Fecha de generacion el registro")
                        .HasDefaultValue(new DateTime(2020, 1, 14, 21, 47, 15, 142, DateTimeKind.Local).AddTicks(610));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Usuario que genero el registro")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text")
                        .HasComment("Descripcion detallada del estado del proveedor");

                    b.Property<bool>("IsInternal")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_internal")
                        .HasColumnType("boolean")
                        .HasComment("Flag para verificar si el tipo de servicio es de uso interno")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(150)")
                        .HasComment("Nombre del estado del proveedor")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Ultima fecha de actualizacion el registro");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("character varying(50)")
                        .HasComment("Ultimo usuario que actualizo el registro")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("se_types");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Generals.LocationEntity", b =>
                {
                    b.HasOne("setours.jarvis.domain.entity.Generals.LocationEntity", "Location")
                        .WithMany("Locations")
                        .HasForeignKey("ReferenceId");
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Providers.ProviderEntity", b =>
                {
                    b.HasOne("setours.jarvis.domain.entity.Generals.LocationEntity", "City")
                        .WithMany("CityProviders")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("setours.jarvis.domain.entity.Generals.LocationEntity", "Country")
                        .WithMany("CountryProviders")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("setours.jarvis.domain.entity.Generals.DocumentEntity", "Document")
                        .WithMany("Providers")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("setours.jarvis.domain.entity.Providers.ProviderChainEntity", "ProviderChain")
                        .WithMany("Providers")
                        .HasForeignKey("ProviderChainId");

                    b.HasOne("setours.jarvis.domain.entity.Providers.ProviderStatusEntity", "Status")
                        .WithMany("Providers")
                        .HasForeignKey("ProviderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Rates.RateDateEntity", b =>
                {
                    b.HasOne("setours.jarvis.domain.entity.Rates.RateEntity", "Rate")
                        .WithMany("RateDates")
                        .HasForeignKey("RateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Rates.RateDetailEntity", b =>
                {
                    b.HasOne("setours.jarvis.domain.entity.Generals.CurrencyEntity", "Currency")
                        .WithMany("RateDetails")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("setours.jarvis.domain.entity.Generals.OccupationEntity", "Occupation")
                        .WithMany("RateDetails")
                        .HasForeignKey("OccupationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("setours.jarvis.domain.entity.Rates.RateDateEntity", "RateDate")
                        .WithMany("RateDetails")
                        .HasForeignKey("RateDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Rates.RateEntity", b =>
                {
                    b.HasOne("setours.jarvis.domain.entity.Rates.RateStatusEntity", "RateStatus")
                        .WithMany("Rates")
                        .HasForeignKey("RateStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("setours.jarvis.domain.entity.Services.ServiceDetailEntity", "ServiceDetail")
                        .WithMany("Rates")
                        .HasForeignKey("ServiceDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Services.ServiceDetailEntity", b =>
                {
                    b.HasOne("setours.jarvis.domain.entity.Services.ServiceEntity", "Service")
                        .WithMany("ServiceDetails")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("setours.jarvis.domain.entity.Services.ServiceEntity", b =>
                {
                    b.HasOne("setours.jarvis.domain.entity.Generals.LocationEntity", "City")
                        .WithMany("CityServices")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("setours.jarvis.domain.entity.Generals.LocationEntity", "Country")
                        .WithMany("CountryServices")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("setours.jarvis.domain.entity.Providers.ProviderEntity", "Provider")
                        .WithMany("Services")
                        .HasForeignKey("ProviderId");

                    b.HasOne("setours.jarvis.domain.entity.Services.ServiceStatusEntity", "ServiceStatus")
                        .WithMany("Services")
                        .HasForeignKey("ServiceStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("setours.jarvis.domain.entity.Services.ServiceTypeEntity", "ServiceType")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
